
--Creating Tables--
CREATE TABLE CUSTOMER
(
CUSTOMER_ID NUMBER(10) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR2(255) NOT NULL,
SURNAME VARCHAR2(255) NOT NULL,
ADDRESS VARCHAR2(255) NOT NULL,
CONTACT_NUMBER NUMBER(15) NOT NULL,
EMAIL VARCHAR(255) NOT NULL
);

CREATE TABLE EMPLOYEE
(
EMPLOYEE_ID VARCHAR2(10) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR2(255) NOT NULL,
SURNAME VARCHAR2(255) NOT NULL,
CONTACT_NUMBER NUMBER(15) NOT NULL,
DEPARTMENT VARCHAR2(255) NOT NULL,
ADDRESS VARCHAR2(255) NOT NULL,
EMAIL VARCHAR(255) NOT NULL
);

CREATE TABLE COIN_DELIVERY
(
DELIVERY_ID NUMBER(10) NOT NULL PRIMARY KEY,
DELIVERY_NOTES VARCHAR2(255)NOT NULL,
DISPATCH_DATE DATE,
DELIVERY_DATE DATE
);

CREATE TABLE COIN
(
COIN_ID NUMBER(10) NOT NULL PRIMARY KEY,
PRODUCT VARCHAR2(255) NOT NULL,
PRICE FLOAT NOT NULL,
QTY NUMBER
);

CREATE TABLE COIN_RETURNS
(
RETURN_ID VARCHAR2(10 CHAR) NOT NULL PRIMARY KEY,
RETURN_DATE DATE,
REASON VARCHAR2(255) NOT NULL,
CUSTOMER_ID NUMBER(10) NOT NULL,
COIN_ID NUMBER(10) NOT NULL,
EMPLOYEE_ID VARCHAR2(10) NOT NULL,
CONSTRAINT FK_CUSTOMERS_ID FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER,
CONSTRAINT FK_COINS_ID FOREIGN KEY(COIN_ID) REFERENCES COIN,
CONSTRAINT FK_EMPLOYEES_ID FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE
);

CREATE TABLE INVOICE
(
INVOICE_NUM NUMBER(15) NOT NULL PRIMARY KEY,
CUSTOMER_ID NUMBER(10) NOT NULL,
INVOICE_DATE DATE,
EMPLOYEE_ID VARCHAR2(10) NOT NULL,
COIN_ID NUMBER(10) NOT NULL,
DELIVERY_ID NUMBER(10) NOT NULL,
CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER,
CONSTRAINT FK_COIN_ID FOREIGN KEY(COIN_ID) REFERENCES COIN,
CONSTRAINT FK_EMPLOYEE_ID FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE,
CONSTRAINT FK_DELIVERY_ID FOREIGN KEY (DELIVERY_ID) REFERENCES COIN_DELIVERY
);

--Inserting values into tables--

INSERT INTO CUSTOMER VALUES(11011,'Mat','Smith','18 Water Rd',0877277521,'msmith@isat.com');
INSERT INTO CUSTOMER VALUES(11012,'Julien','Hendricks','22 Water Rd',0863257857,'jh@mcom.co.za');
INSERT INTO CUSTOMER VALUES(11013,'Sam','Clark','101 Summer Lane',0834567891,'sclark@mocm.co.za');
INSERT INTO CUSTOMER VALUES(11014,'Kevin','Jones','55 Mountain Way',0612547895,'kj@isat.co.za');
INSERT INTO CUSTOMER VALUES(11015,'Lucy','Williams','5 Main Rd',0827238521,'lw@mcal.co.za');

INSERT INTO EMPLOYEE VALUES('emp101','Xander','Davis',0877277521,'sales','10 Main Road','xand@isat.com');
INSERT INTO EMPLOYEE VALUES('emp102','Steven','Marks',0837377522,'marketing','18 Water Road','sm@isat.com');
INSERT INTO EMPLOYEE VALUES('emp103','Jessica','Andrews',0817117523,'sales','21 Circle Lane','ja@isat.com');
INSERT INTO EMPLOYEE VALUES('emp104','Wayne','Dryer',0797215244,'sales','1 Sea Road','dryer@isat.com');
INSERT INTO EMPLOYEE VALUES('emp105','Xolani','Samson',0827122255,'manager','12 Main Road','xosam@isat.com');

INSERT INTO COIN_DELIVERY VALUES(511,'Double packaging requested',TO_DATE('10/05/2021','DD/MM/YYYY'),TO_DATE('15/05/2021','DD/MM/YYYY'));
INSERT INTO COIN_DELIVERY VALUES(512,'Delivery to work address',TO_DATE('12/05/2021','DD/MM/YYYY'),TO_DATE('15/05/2021','DD/MM/YYYY'));
INSERT INTO COIN_DELIVERY VALUES(513,'Signature required',TO_DATE('12/05/2021','DD/MM/YYYY'),TO_DATE('17/05/2021','DD/MM/YYYY'));
INSERT INTO COIN_DELIVERY VALUES(514,'No notes',TO_DATE('12/05/2021','DD/MM/YYYY'),TO_DATE('15/05/2021','DD/MM/YYYY'));
INSERT INTO COIN_DELIVERY VALUES(515,'Birthday present wrapping required',TO_DATE('18/05/2021','DD/MM/YYYY'),TO_DATE('19/05/2021','DD/MM/YYYY'));
INSERT INTO COIN_DELIVERY VALUES(516,'Delivery to work address',TO_DATE('20/05/2021','DD/MM/YYYY'),TO_DATE('25/05/2021','DD/MM/YYYY'));
INSERT INTO COIN_DELIVERY VALUES(517,'Double packaging requested',TO_DATE('25/05/2021','DD/MM/YYYY'),TO_DATE('27/05/2021','DD/MM/YYYY'));

INSERT INTO COIN VALUES(7111,'1oz Gold Kruger Rand',5999,10);
INSERT INTO COIN VALUES(7112,'1oz Silver Kruger Rand',12999,8);
INSERT INTO COIN VALUES(7113,'Gold Big 5 Uncirculated',15999,8);
INSERT INTO COIN VALUES(7114,'Silver Big 5 Pack',7999,5);
INSERT INTO COIN VALUES(7115,'1oz Gold Palaeontology',11999,15);
INSERT INTO COIN VALUES(7116,'1oz Silver Palaeontology',7999,12);

INSERT INTO COIN_RETURNS VALUES('ret001',TO_DATE('25/05/2021','DD/MM/YYYY'),'Customer npt satisfied with product',11011,7116,'emp101');
INSERT INTO COIN_RETURNS VALUES('ret002',TO_DATE('25/05/2021','DD/MM/YYYY'),'Product missing part',11013,7114,'emp103');

INSERT INTO INVOICE VALUES(8111,11011,TO_DATE('15/05/2021','DD/MM/YYYY'),'emp103',7111,511);
INSERT INTO INVOICE VALUES(8112,11013,TO_DATE('15/05/2021','DD/MM/YYYY'),'emp101',7116,512);
INSERT INTO INVOICE VALUES(8113,11012,TO_DATE('17/05/2021','DD/MM/YYYY'),'emp101',7112,513);
INSERT INTO INVOICE VALUES(8114,11015,TO_DATE('17/05/2021','DD/MM/YYYY'),'emp102',7111,514);
INSERT INTO INVOICE VALUES(8115,11011,TO_DATE('17/05/2021','DD/MM/YYYY'),'emp102',7115,515);
INSERT INTO INVOICE VALUES(8116,11015,TO_DATE('18/05/2021','DD/MM/YYYY'),'emp103',7115,516);
INSERT INTO INVOICE VALUES(8117,11012,TO_DATE('19/05/2021','DD/MM/YYYY'),'emp105',7112,517);
INSERT INTO INVOICE VALUES(8118,11013,TO_DATE('19/05/2021','DD/MM/YYYY'),'emp105',7112,517);

--Question 4--
SELECT (C.FIRST_NAME) || ', ' || (C.SURNAME) AS CUSTOMER_NAME, E.EMPLOYEE_ID, CND.DELIVERY_NOTES AS DESCRIPTIONS,
CN.PRODUCT AS COIN, I.INVOICE_NUM, I.INVOICE_DATE
FROM CUSTOMER C LEFT JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
INNER JOIN EMPLOYEE E ON I.EMPLOYEE_ID = E.EMPLOYEE_ID
INNER JOIN COIN_DELIVERY CND ON CND.DELIVERY_ID = I.DELIVERY_ID
INNER JOIN COIN CN ON CN.COIN_ID = I.COIN_ID
WHERE I.INVOICE_DATE >= TO_DATE('18/05/2021','DD/MM/YYYY');

--Question 5--
CREATE OR REPLACE VIEW EMP_COMMISSION
AS
SELECT DISTINCT E.EMPLOYEE_ID, E.FIRST_NAME, E.SURNAME, CN.PRICE, CN.PRICE*0.10 AS COMMISSION
FROM EMPLOYEE E INNER JOIN INVOICE I ON E.EMPLOYEE_ID = I.EMPLOYEE_ID
INNER JOIN COIN CN ON CN.COIN_ID = I.COIN_ID;

--Question 6--

SET SERVEROUTPUT ON
DECLARE

A_CUSTOMERNAME CUSTOMER.FIRST_NAME%TYPE;
A_COINNAME COIN.PRODUCT%TYPE;
A_COINPRICE COIN.PRICE%TYPE;
A_COINDELIVERY COIN_DELIVERY.DELIVERY_NOTES%TYPE;

CURSOR MYTEST IS

SELECT DISTINCT (C.FIRST_NAME) || ', ' || (C.SURNAME) AS CUSTOMER_NAME, CN.PRODUCT, CN.PRICE, CND.DELIVERY_NOTES
FROM CUSTOMER C LEFT JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
INNER JOIN COIN_DELIVERY CND ON CND.DELIVERY_ID = I.DELIVERY_ID
INNER JOIN COIN CN ON CN.COIN_ID = I.COIN_ID
WHERE CN.PRICE <= 8000;

BEGIN
OPEN MYTEST;

LOOP

FETCH MYTEST INTO
A_CUSTOMERNAME,
A_COINNAME,
A_COINPRICE,
A_COINDELIVERY;

EXIT WHEN MYTEST%NOTFOUND;

DBMS_OUTPUT.PUT_LINE('CUSTOMER NAME:' || A_CUSTOMERNAME);
DBMS_OUTPUT.PUT_LINE('COIN NAME:' || A_COINNAME);
DBMS_OUTPUT.PUT_LINE('COIN PRICE:' || A_COINPRICE);
DBMS_OUTPUT.PUT_LINE('NOTES:' || A_COINDELIVERY);
DBMS_OUTPUT.PUT_LINE('--------------------------------------------');

END LOOP;
CLOSE MYTEST;
END;

--QUESTION 7--

SET SERVEROUTPUT ON
DECLARE

A_CUSTOMERNAME CUSTOMER.FIRST_NAME%TYPE;
A_EMPLOYEENAME EMPLOYEE.FIRST_NAME%TYPE;
A_COINNAME COIN.PRODUCT%TYPE;
A_RETURNREASON COIN_RETURNS.REASON%TYPE;
A_RETURNDATE COIN_RETURNS.RETURN_DATE%TYPE;

CURSOR MYTEST IS

SELECT DISTINCT (C.FIRST_NAME) || ', ' || (C.SURNAME) AS CUSTOMER_NAME, (E.FIRST_NAME) || ', ' || (E.SURNAME) AS EMPLOYEE_NAME,
CN.PRODUCT, CR.REASON,CR.RETURN_DATE
FROM CUSTOMER C LEFT JOIN COIN_RETURNS CR ON C.CUSTOMER_ID = CR.CUSTOMER_ID
INNER JOIN EMPLOYEE E ON E.EMPLOYEE_ID = CR.EMPLOYEE_ID
INNER JOIN COIN CN ON CN.COIN_ID = CR.COIN_ID;

BEGIN
OPEN MYTEST;

LOOP

FETCH MYTEST INTO
A_CUSTOMERNAME,
A_EMPLOYEENAME,
A_COINNAME,
A_RETURNREASON,
A_RETURNDATE;

EXIT WHEN MYTEST%NOTFOUND;

DBMS_OUTPUT.PUT_LINE('CUSTOMER:' || A_CUSTOMERNAME);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE:' || A_EMPLOYEENAME);
DBMS_OUTPUT.PUT_LINE('PRODUCT:' || A_COINNAME);
DBMS_OUTPUT.PUT_LINE('RETURN REASON:' || A_RETURNREASON);
DBMS_OUTPUT.PUT_LINE('RETURN DATE:' || A_RETURNDATE);
DBMS_OUTPUT.PUT_LINE('--------------------------------------------');

END LOOP;
CLOSE MYTEST;
END;

--Question 8--

SET SERVEROUTPUT ON
DECLARE 

A_INVOICENUMBER INVOICE.INVOICE_NUM%TYPE;
A_COINNAME COIN.PRODUCT%TYPE;
A_COINPRICE COIN.PRICE%TYPE;
A_COINDELIVERY COIN_DELIVERY.DELIVERY_NOTES%TYPE;

CURSOR MYTEST IS

SELECT DISTINCT I.INVOICE_NUM, CN.PRODUCT, CN.PRICE, CND.DELIVERY_NOTES
FROM INVOICE I INNER JOIN COIN CN ON I.COIN_ID = CN.COIN_ID
INNER JOIN COIN_DELIVERY CND ON CND.DELIVERY_ID = I.DELIVERY_ID
WHERE I.INVOICE_NUM = 8115;


BEGIN 
OPEN MYTEST;

LOOP

FETCH MYTEST INTO
A_INVOICENUMBER,
A_COINNAME,
A_COINPRICE,
A_COINDELIVERY;

EXIT WHEN MYTEST%NOTFOUND;

DBMS_OUTPUT.PUT_LINE('INVOICE NUMBER:' || A_INVOICENUMBER);
DBMS_OUTPUT.PUT_LINE('COIN PRODUCT:' || A_COINNAME);
DBMS_OUTPUT.PUT_LINE('PRICE:' || A_COINPRICE);
DBMS_OUTPUT.PUT_LINE('DELIVERY NOTE:' || A_COINDELIVERY);
DBMS_OUTPUT.PUT_LINE('COIN TYPE:' || 'Premium');
DBMS_OUTPUT.PUT_LINE('--------------------------------------------');

END LOOP;
CLOSE MYTEST;
END;

--Question 9--

SET SERVEROUTPUT ON
DECLARE 

DISCOUNT NUMBER;
A_CUSTOMERNAME CUSTOMER.FIRST_NAME%TYPE;
A_CUSTOMERSURNAME CUSTOMER.SURNAME%TYPE;
A_COINID COIN.COIN_ID%TYPE;
A_COINPRICE COIN.PRICE%TYPE;
A_DELIVERYDATE COIN_DELIVERY.DELIVERY_DATE%TYPE;
A_INVOICEDATE INVOICE.INVOICE_DATE%TYPE;


CURSOR MYTEST IS

SELECT DISTINCT C.FIRST_NAME, C.SURNAME, CN.COIN_ID, CN.PRICE, CND.DELIVERY_DATE, I.INVOICE_DATE
FROM CUSTOMER C INNER JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
INNER JOIN COIN_DELIVERY CND ON CND.DELIVERY_ID = I.DELIVERY_ID
INNER JOIN COIN CN ON CN.COIN_ID = I.COIN_ID
WHERE I.INVOICE_DATE >= TO_DATE('18/05/2021','DD/MM/YYYY') AND I.INVOICE_DATE <= TO_DATE('20/05/2021','DD/MM/YYYY');

BEGIN 
OPEN MYTEST;

LOOP

FETCH MYTEST INTO
A_CUSTOMERNAME,
A_CUSTOMERSURNAME,
A_COINID,
A_COINPRICE,
A_DELIVERYDATE,
A_INVOICEDATE;

DISCOUNT := A_COINPRICE - (A_COINPRICE* 0.25);

EXIT WHEN MYTEST%NOTFOUND;

DBMS_OUTPUT.PUT_LINE('FIRST NAME:' || A_CUSTOMERNAME);
DBMS_OUTPUT.PUT_LINE('SURNAME:' || A_CUSTOMERSURNAME);
DBMS_OUTPUT.PUT_LINE('COIN ID:' || A_COINID);
DBMS_OUTPUT.PUT_LINE('PRICE:' || A_COINPRICE);
DBMS_OUTPUT.PUT_LINE('DISCOUNT:' || DISCOUNT);
DBMS_OUTPUT.PUT_LINE('DELIVERY DATE:' || A_DELIVERYDATE);
DBMS_OUTPUT.PUT_LINE('INVOICE DATE:' || A_INVOICEDATE);
DBMS_OUTPUT.PUT_LINE('--------------------------------------------');

END LOOP;
CLOSE MYTEST;
END;
